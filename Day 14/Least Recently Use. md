```c++
#include<bits/stdc++.h>
using namespace std;
class node{   
public:
    int key;
    int value;
    node* next;
    node* prev;
    node(int _key, int _val){
        key = _key;
        value = _val;
    }
};
class LRUCache
{
public:
    node *head = new node(-1,-1);
    node *tail = new node(-1,-1);
    int cap;
    unordered_map<int,node*> mp;
    LRUCache(int capacity)
    {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    int get(int key)
    {
        if(mp.find(key) != mp.end()){
            node *resnode = mp[key];
            int res = resnode ->value;
            mp.erase(key);
            deleteNode(resnode);
            addNode(resnode);
            
            mp[key] = head->next;
            return res;
        }
        return -1;
    }

    void put(int key, int value)
    {
        if(mp.find(key) != mp.end()){
            node *existnode = mp[key];
            mp.erase(key);
            deleteNode(existnode);
        }
        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        addNode(new node(key,value));
        mp[key] = head->next;
    }
    void addNode(node *newnode){
        node *temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }
    void deleteNode(node *delnode){
        node *delprev = delnode->prev;
        node *delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }
};

```
Time - o(N), since we are using unordered_map for get() and put()
